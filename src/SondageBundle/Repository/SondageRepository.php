<?php

namespace SondageBundle\Repository;

/**
 * SondageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SondageRepository extends \Doctrine\ORM\EntityRepository
{
    public function findSondageByUserID($user)
    {

        return $this->getEntityManager()
            ->createQuery('SELECT p FROM SondageBundle:Sondage p WHERE p.user = '.$user.'')
            ->execute();
    }

    public function findquestion($id , $valeur)
    {
        if ($valeur == 1){ return $this->getEntityManager()
            ->createQuery('SELECT p.question1 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}

        elseif ($valeur == 2){return $this->getEntityManager()
            ->createQuery('SELECT p.question2 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        elseif ($valeur == 3){return $this->getEntityManager()
            ->createQuery('SELECT p.question3 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        elseif ($valeur == 4){return $this->getEntityManager()
            ->createQuery('SELECT p.question4 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        elseif ($valeur == 5){return $this->getEntityManager()
            ->createQuery('SELECT p.question5 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        elseif ($valeur == 6){return $this->getEntityManager()
            ->createQuery('SELECT p.question6 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        elseif ($valeur == 7){return $this->getEntityManager()
            ->createQuery('SELECT p.question7 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        elseif ($valeur == 8){return $this->getEntityManager()
            ->createQuery('SELECT p.question8 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        elseif ($valeur == 9){return $this->getEntityManager()
            ->createQuery('SELECT p.question9 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
            ->execute();}
        else
            return $this->getEntityManager()
                ->createQuery('SELECT p.question10 as question FROM SondageBundle:Sondage p WHERE p.id = '.$id.'')
                ->execute();}



    public function findsearch($data)
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p FROM SondageBundle:Sondage p WHERE p.titre Like :searchterm')
            ->setParameter('searchterm', '%'.$data['Rechercher'].'%')
            ->execute();
    }

    public function findSondageByThemeID($theme)
    {

        return $this->getEntityManager()
            ->createQuery('SELECT p FROM SondageBundle:Sondage p WHERE p.theme = '.$theme.'')
            ->execute();
    }


    public function empty_sessionID($id_s, $id_q){

        $qb = $this->getEntityManager()->createQueryBuilder();
        $q = $qb->update('SondageBundle:Sondage', 'u')
            ->set('u.sessionId', 'null')
            ->where('u.id = ?1')
            ->setParameter(1, $id_s)
            ->getQuery();
        $q->execute();
        $k = $qb->update('SondageBundle:Questions', 'u')
            ->set('u.sessionId', 'null')
            ->where('u.id = ?1')
            ->setParameter(1, $id_q)
            ->getQuery();
        $k->execute();
    }
}
